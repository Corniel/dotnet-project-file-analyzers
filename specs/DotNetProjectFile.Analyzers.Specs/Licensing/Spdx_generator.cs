#pragma warning disable RS1035 // FP

using System.IO;
using System.Net.Http;
using System.Net.Http.Json;
using System.Runtime.CompilerServices;
using System.Text.Encodings.Web;
using System.Web;

namespace Licensing.Spdx;

public class Generator
{
    private static readonly string SpdxUrl = "https://spdx.org/licenses/";
    private static readonly string SpdxLicensesUrl = $"{SpdxUrl}licenses.json";

#if DEBUG // To avoid running in CI pipeline.
    [Test]
#endif
    public async Task Generate()
    {
        using var client = new HttpClient();
        using var response = await client.GetAsync(SpdxLicensesUrl);
        response.IsSuccessStatusCode.Should().BeTrue();

        var list = await response.Content.ReadFromJsonAsync<LicenseList>();
        var licenses = list?.Licenses?.OfType<License>() ?? [];
        var valid = licenses.Where(l => l.LicenseId is { Length: > 0 });

        var curDir = GetCurrentDirectoryPath();
        var outputDir = Path.Combine(curDir, "../../../src/DotNetProjectFile.Analyzers/Licensing/Generated");
        Directory.CreateDirectory(outputDir);

        foreach (var license in valid)
        {
            var typeName = license.LicenseId!
                .Replace("-", "_")
                .Replace(".", "_");

            if (char.IsDigit(typeName[0]))
            {
                typeName = $"_{typeName}";
            }

            var outputPath = Path.Combine(outputDir, $"{typeName}.cs");

            if (license.IsDeprecatedLicenseId)
            {
                if (File.Exists(outputPath))
                {
                    File.Delete(outputPath);
                }

                continue;
            }

            if (File.Exists(outputPath))
            {
                continue;
            }

            var osiOrFsf = license.IsOsiApproved || license.IsFsfLibre;

            // Currently we only retrieve the license texts for OSI and FSF approved licenses.
            // Non-OSI and non-FSF approved licenses are found few and far between out in the wild.
            // This is mostly to conserve bandwidth and appears to be the same requirement for
            // licenses to be hosted on licenses.nuget.org.
            var text = osiOrFsf ? (await GetLicenseText(license.LicenseId!))?.Trim() : null;

            var escapedText = text is not { Length: > 0 } ? "null" : HttpUtility.JavaScriptStringEncode(text, true);
            var escapedId = HttpUtility.JavaScriptStringEncode(license.LicenseId!, true);
            var escapedName = HttpUtility.JavaScriptStringEncode(license.Name ?? license.LicenseId!, true);

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#pragma warning disable");
            sb.AppendLine();
            sb.AppendLine("namespace DotNetProjectFile.Licensing;");
            sb.AppendLine();
            sb.AppendLine("partial class Spdx");
            sb.AppendLine("{");
            sb.AppendLine($"    public static readonly SpdxLicenseInfo {typeName} = new()");
            sb.AppendLine("    {");

            sb.AppendLine($"        Id = {escapedId},");
            sb.AppendLine($"        Name = {escapedName},");
            sb.AppendLine($"        Osi = {(license.IsOsiApproved ? "true" : "false")},");
            sb.AppendLine($"        Fsf = {(license.IsFsfLibre ? "true" : "false")},");
            sb.AppendLine($"        SeeAlso = [{string.Join(", ", license.SeeAlso?.Select(x => HttpUtility.JavaScriptStringEncode(x, true)) ?? [])}],");
            sb.AppendLine($"        LicenseText = {escapedText},");

            sb.AppendLine("    };");
            sb.AppendLine("}");

            await File.WriteAllTextAsync(outputPath, sb.ToString());
        }

        async Task<string?> GetLicenseText(string id)
        {
            try
            {
                using var detailsResponse = await client.GetAsync($"{SpdxUrl}{id}.json");
                var details = await detailsResponse.Content.ReadFromJsonAsync<LicenseDetails>();
                return details?.LicenseText;
            }
            catch
            {
                return null;
            }
        }

        string GetCurrentDirectoryPath([CallerFilePath] string? path = null)
        {
            if (path is { Length: > 0 })
            {
                return Path.GetDirectoryName(path) ?? Directory.GetCurrentDirectory();
            }

            return Directory.GetCurrentDirectory();
        }
    }

    public sealed record LicenseList
    {
        public string? LicenseListVersion { get; init; }

        public License?[]? Licenses { get; init; }

        public string? ReleaseDate { get; init; }
    }

    public record License
    {
        public string? Reference { get; init; }

        public bool IsDeprecatedLicenseId { get; init; }

        public string? DetailsUrl { get; init; }

        public int ReferenceNumber { get; init; }

        public string? Name { get; init; }

        public string? LicenseId { get; init; }

        public string?[]? SeeAlso { get; init; }

        public bool IsOsiApproved { get; init; }

        public bool IsFsfLibre { get; init; }
    }

    public sealed record LicenseDetails
    {
        public string? LicenseText { get; init; }
    }
}
